# Merge two dataframes on icustay_id	
lodsYsaps_merged = lodsYsaps.merge(df_flag, on='icustay_id')

# keep only adult cases
lodsYsaps_adult = lodsYsaps_merged.loc[lodsYsaps_merged['icustay_age_group'] == 'adult']

# DECIDE ABOUT DROPPING NULL VALUES AND INSERT HERE
lodsYsaps_adult_dropped = lodsYsaps_adult.dropna().copy()

# create dataframe based on computed scores
lodsYsaps_final = lodsYsaps_adult_dropped[['neurologic','cardiovascular','renal','pulmonary','hematologic',
                         'hepatic', 'age_score', 'hr_score', 'resp_score', 'sysbp_score',  
				'temp_score', 'uo_score', 'vent_score', 'bun_score', 
				'hematocrit_score', 'wbc_score', 'glucose_score', 'potassium_score', 
				'sodium_score', 'bicarbonate_score', 'gcs_score', 'icustay_expire_flag']].copy()

# create target variable
y_lodsYsaps = lodsYsaps_final.pop('icustay_expire_flag')

# create X variable
X_lodsYsaps = lodsYsaps_final.copy()

# train-test split	
X_train_lodsYsaps, X_test_lodsYsaps, y_train_lodsYsaps, y_test_lodsYsaps = train_test_split(X_lodsYsaps, y_lodsYsaps, 
                                                test_size=.33,
                                                random_state=0,
                                               stratify=y_lodsYsaps)
# Train and fit model                                                   
rf_lodsYsaps = RandomForestClassifier(n_estimators = 300, random_state=0,n_jobs=-1)

rf_lodsYsaps.fit(X_train_lodsYsaps, y_train_lodsYsaps)

# Test Prediction
pred_lodsYsaps = rf_lodsYsaps.predict(X_test_lodsYsaps)
print('Accuracy score: {:.3}'.format(rf_lodsYsaps.score(X_test_lodsYsaps, y_test_lodsYsaps)))

# Get predicted probabilites 	
y_predict_proba_lodsYsaps = rf_lodsYsaps.predict_proba(X_test_lodsYsaps)

# Get predicted probabilites of 1 (Death)
y_proba_lodsYsaps = y_predict_proba_lodsYsaps[:,1]

# Get AUROC score
print('AUROC: {:.3}'.format(roc_auc_score(y_test_lodsYsaps, y_proba_lodsYsaps)))

# Calculate Standard Mortality Rate (SMR) 
SMR_lodsYsaps = sum(y_test_lodsYsaps)/sum(pred_lodsYsaps)
print('SMR: {:.3}'.format(SMR_lodsYsaps))
# (different way) print('SMR: {:.3}'.format(sum(y_test)/sum(pred)))

# Calculate Brier score
difference_lodsYsaps = y_proba_lodsYsaps - y_test_lodsYsaps
squared_lodsYsaps = np.square(difference_lodsYsaps)
Brier_lodsYsaps = np.mean(squared_lodsYsaps)
print('Brier Score: {:.3}'.format(Brier_lodsYsaps))
# (different way) print('Brier Score: {:.3}'.format(np.mean(np.square(y_proba - y_test))))






# calculate the fpr and tpr for all thresholds of the classification

fpr_lodsYsaps, tpr_lodsYsaps, threshold = roc_curve(y_test_lodsYsaps, y_proba_lodsYsaps)
roc_auc_lodsYsaps = auc(fpr_lodsYsaps, tpr_lodsYsaps)


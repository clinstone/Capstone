
# keep only adult cases
lodsYsaps2_adult = lodsYsaps_merged.loc[lodsYsaps_merged['icustay_age_group'] == 'adult']

# DECIDE ABOUT DROPPING NULL VALUES AND INSERT HERE
lodsYsaps2_adult_dropped = lodsYsaps2_adult.dropna().copy()

# create dataframe based on computed scores
lodsYsaps2_final = lodsYsaps2_adult_dropped[['age_score_x', 'preiculos_score', 'gcs_score_x', 'heartrate_score', \
                              'meanbp_score', 'resprate_score', 'temp_score_x','urineoutput_score', \
                              'mechvent_score','electivesurgery_score', \
                                           'neurologic','cardiovascular','renal','pulmonary','hematologic',
                         'hepatic', 'age_score_y', 'hr_score', 'resp_score', 'sysbp_score',  
				'temp_score_y', 'uo_score', 'vent_score', 'bun_score', 
				'hematocrit_score', 'wbc_score', 'glucose_score', 'potassium_score', 
				'sodium_score', 'bicarbonate_score', 'gcs_score_y', 'icustay_expire_flag']].copy()

# create target variable
y_lodsYsaps2 = lodsYsaps2_final.pop('icustay_expire_flag')

# create X variable
X_lodsYsaps2 = lodsYsaps2_final.copy()

# train-test split	
X_train_lodsYsaps2, X_test_lodsYsaps2, y_train_lodsYsaps2, y_test_lodsYsaps2 = train_test_split(X_lodsYsaps2, \
                                                y_lodsYsaps2, 
                                                test_size=.33,
                                                random_state=0,
                                               stratify=y_lodsYsaps2)
# Train and fit model                                                   
rf_lodsYsaps2 = GradientBoostingClassifier( random_state=0)

rf_lodsYsaps2.fit(X_train_lodsYsaps2, y_train_lodsYsaps2)

# Test Prediction
pred_lodsYsaps2 = rf_lodsYsaps2.predict(X_test_lodsYsaps2)
print('Accuracy score: {:.3}'.format(rf_lodsYsaps2.score(X_test_lodsYsaps2, y_test_lodsYsaps2)))

# Get predicted probabilites 	
y_predict_proba_lodsYsaps2 = rf_lodsYsaps2.predict_proba(X_test_lodsYsaps2)

# Get predicted probabilites of 1 (Death)
y_proba_lodsYsaps2 = y_predict_proba_lodsYsaps2[:,1]

# Get AUROC score
print('AUROC: {:.3}'.format(roc_auc_score(y_test_lodsYsaps2, y_proba_lodsYsaps2)))

# Calculate Standard Mortality Rate (SMR) 
SMR_lodsYsaps2 = sum(y_test_lodsYsaps2)/sum(pred_lodsYsaps2)
print('SMR: {:.3}'.format(SMR_lodsYsaps2))
# (different way) print('SMR: {:.3}'.format(sum(y_test)/sum(pred)))

# Calculate Brier score
difference_lodsYsaps2 = y_proba_lodsYsaps2 - y_test_lodsYsaps2
squared_lodsYsaps2 = np.square(difference_lodsYsaps2)
Brier_lodsYsaps2 = np.mean(squared_lodsYsaps2)
print('Brier Score: {:.3}'.format(Brier_lodsYsaps2))
# (different way) print('Brier Score: {:.3}'.format(np.mean(np.square(y_proba - y_test))))






# calculate the fpr and tpr for all thresholds of the classification

fpr_lodsYsaps2, tpr_lodsYsaps2, threshold = roc_curve(y_test_lodsYsaps2, y_proba_lodsYsaps2)
roc_auc_lodsYsaps2 = auc(fpr_lodsYsaps2, tpr_lodsYsaps2)

